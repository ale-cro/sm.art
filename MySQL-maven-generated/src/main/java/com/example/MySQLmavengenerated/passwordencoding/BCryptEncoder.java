package com.example.MySQLmavengenerated.passwordencoding;

import org.springframework.context.annotation.Bean;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.security.SecureRandom;

/**
 * Classe per definire i parametri dell'encoder BCrypt, per eseguire Hashing della password
 * https://www.baeldung.com/spring-security-registration-password-encoding-bcrypt
 */
public class BCryptEncoder extends BCryptPasswordEncoder {

    /*Testing bcrypt algorithm for hashing the password.
        Spring Security has an BCryptPasswordEncoder
    * The work factor influences the speed of the password encoding.
    * For instance, bcrypt has the parameter strength.
    * The algorithm will make 2 to the power of strength iterations to calculate the hash value.
    * The bigger the number, the slower the encoding.*/

    /*BCryptPasswordEncoder has the parameter strength. The default value in Spring Security is 10.
      It’s recommended to use a SecureRandom as salt generator, because it provides a cryptographically strong random number.*/

    @Bean
    public String encode(String plainPassword) {

        /*. https://reflectoring.io/spring-security-password-handling/
        A salt is a sequence of randomly generated bytes that is hashed along with the password. The salt is stored in the storage and doesn’t need to be protected.
        henever the user tries to authenticate, the user’s password is hashed with the saved salt and the result should match the stored password.*/

        int strength = 10; // work factor of bcrypt

        BCryptPasswordEncoder bCryptPasswordEncoder =
                new BCryptPasswordEncoder(strength, new SecureRandom());

        /*encode() to convert the plain password into the encoded form and the method matches() to compare a plain password with the encoded password.*/
        return bCryptPasswordEncoder.encode(plainPassword);
    }

}